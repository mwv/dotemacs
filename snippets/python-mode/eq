# -*- mode: snippet -*-
# name: Equality class
# key: eq
# expand-env: ((yas/indent-line 'fixed))
# --
class ${1:ClassName}(${2:object}):
    """$3
    """

    def __init__(self, $4):
	"""$5
	${4:$
	(let* ((indent
	       (concat "\n" (make-string (current-column) 32)))
	       (args
		(mapconcat
		 '(lambda (x)
		    (if (not (string= (nth 0 x) ""))
			(concat ":param " (nth 0 x) ":")))
		 (mapcar
		  '(lambda (x)
		     (mapcar
		      (lambda (x)
			(replace-regexp-in-string "[[:blank:]]*$" ""
			 (replace-regexp-in-string "^[[:blank:]]*" "" x))) x))
		  (mapcar '(lambda (x) (split-string x "="))
			  (split-string yas-text ",")))
		indent)))
	  (if (string= args "")
	      (make-string 3 34)
	    (mapconcat
	     'identity
	     (list "" "Arguments:" args (make-string 3 34))
	     indent)))
	}
	${4:$
	(mapconcat
	 '(lambda (x)
	   (if (not (string= (nth 0 x) ""))
	       (concat "self." (nth 0 x) " = " (nth 0 x))))
	 (mapcar
	  '(lambda (x)
	     (mapcar
	      '(lambda (x)
		 (replace-regexp-in-string "[[:blank:]]*$" ""
		  (replace-regexp-in-string "^[[:blank:]]*" "" x)))
	      x))
	  (mapcar '(lambda (x) (split-string x "="))
		  (split-string yas-text ",")))
	 (concat "\n" (make-string (current-column) 32)))
	}
	$0

    def __repr__(self):
	return '%s(%r)' % (self.__class__.__name__, self.__dict__)

    def __eq__(self, other):
	return all(getattr(self, k) == getattr(other, k)
		   for k in self.__dict__)

    def __ne__(self, other):
	return not self.__eq__(other)
